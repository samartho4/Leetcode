/**
 * @param {Function[]} functions
 * @return {Function}
 */
var compose = function(functions) {
    // If there are no functions, return the identity function.
    if (functions.length === 0) {
        return function(x) {
            return x;
        };
    }
    
    // Otherwise, return a new function that applies
    // each function from right to left.
    return function(x) {
        let result = x;
        for (let i = functions.length - 1; i >= 0; i--) {
            result = functions[i](result);
        }
        return result;
    };
};

/**
 * @return {number}
 */
var argumentsLength = function(...args) {
    return args.length;
};




var once = function(fn) {
    let called = false;
    return function(...args){
        if(!called){
            called = true;
            return fn(...args)
        }
     return undefined;   
    }
};
function memoize(fn) {
    const cache = new Map();
    return function(...args) {
        const key = JSON.stringify(args);
        if (cache.has(key)){
            return cache.get(key);
        }
        const result = fn(...args);
        cache.set(key, result);
        return result;
    };
}